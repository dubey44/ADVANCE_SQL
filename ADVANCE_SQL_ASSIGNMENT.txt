create database advance_sql_assignment;
use advance_sql_assignment;

CREATE TABLE actor(
actor_id  integer,
first_name VARCHAR(40),
last_name VARCHAR(40),
last_update  timestamp
);
CREATE TABLE address(
address_id  integer,
address VARCHAR(300),
address2 VARCHAR(300),
district varchar(40),
city_id VARCHAR(50),
postal_code VARCHAR(50),
phone VARCHAR(50),
last_update  timestamp
);


CREATE TABLE category(
category_id  INTEGER,
name_  VARCHAR(300),
last_update  TIMESTAMP);

CREATE TABLE city(
city_id  INTEGER,
city  VARCHAR(300),
country_id  INTEGER,
last_update  TIMESTAMP);

CREATE TABLE country(
country_id  INTEGER,
country  VARCHAR(300),
last_update  TIMESTAMP);

CREATE TABLE customer(
customer_id  INTEGER,
store_id  INTEGER,
first_name  VARCHAR(300),
last_name  VARCHAR(300),
email  VARCHAR(300),
address_id  INTEGER,
activebool  BOOLEAN,
create_date  TIMESTAMP,
last_update  TIMESTAMP,
active_  INTEGER);

CREATE TABLE film_actor(
actor_id  INTEGER,
film_id  INTEGER,
last_update  TIMESTAMP);

CREATE TABLE film_category(
film_id  INTEGER,
category_id INTEGER,
last_update  TIMESTAMP);




CREATE TABLE film(
film_id  INTEGER,
title  VARCHAR(300),
description_  VARCHAR(300),
release_year  INTEGER,
language_id  INTEGER,
original_language_id  INTEGER,
rental_duration  INTEGER,
rental_rate  DECIMAL,
length_  INTEGER,
replacement_cost  DECIMAL,
rating  VARCHAR(300),
last_update  TIMESTAMP,
special_features  VARCHAR(300),
fulltext_  VARCHAR(300));

CREATE TABLE inventory(
inventory_id  INTEGER,
film_id  INTEGER,
store_id  INTEGER,
last_update  TIMESTAMP);

CREATE TABLE language(
language_id  INTEGER,
name_  VARCHAR(300),
last_update  TIMESTAMP);

CREATE TABLE payment(
payment_id  INTEGER,
customer_id  INTEGER,
staff_id  INTEGER,
rental_id  INTEGER,
amount  DECIMAL(20,5),
payment_date  TIMESTAMP);

SELECT * FROM PAYMENT

CREATE TABLE rental(
rental_id  INTEGER,
rental_date  TIMESTAMP,
inventory_id  INTEGER,
customer_id  INTEGER,
return_date  TIMESTAMP,
staff_id  INTEGER,
last_update  TIMESTAMP);

CREATE TABLE staff(
staff_id  INTEGER,
first_name  VARCHAR(300),
last_name  VARCHAR(300),
address_id  INTEGER,
email  VARCHAR(300),
store_id  INTEGER,
active_  VARCHAR(10),
username  VARCHAR(300),
password_  VARCHAR(300),
last_update  TIMESTAMP,
picture  VARCHAR(300));

CREATE TABLE store(
store_id  INTEGER,
manager_staff_id  INTEGER,
address_id  INTEGER,
last_update  TIMESTAMP);

SELECT * FROM actor
SELECT * FROM ADDRESS
SELECT COUNT(*) FROM FILM_CATEGORY

select * from film
select  case when replacement_cost between 9.99 and 19.99 then 'low'
when replacement_cost between 20 and 24.99 then 'medium'
when replacement_cost between 25 and 29.99 then 'high'
end 
)as R_costs
from film
where replacement_cost<30
group by R_costs

select * from film
SELECT * FROM CATEGORY
select * from film_category

SELECT f.title,f.length_, c.name_
from film f, category c , film 





Q1. Write a query that gives an overview of how many films have replacements costs in the following cost ranges

low: 9.99 - 19.99
medium: 20.00 - 24.99
high: 25.00 - 29.99

create view sal_garding
as
select  case when replacement_cost between 9.99 and 19.99 then 'low'
when replacement_cost between 20 and 24.99 then 'medium'
when replacement_cost between 25 and 29.99 then 'high'
end 
as R_costs
from film
where replacement_cost<30;

select R_costs,count(*) from sal_garding
group by R_costs

Q2. Write a query to create a list of the film titles including their film title, 
film length and film category name ordered descendingly by the film length.
 Filter the results to only the movies in the category 'Drama' or 'Sports'.
Eg.	"STAR OPERATION"	"Sports"	181
	"JACKET FRISCO"		"Drama"		181
    

    

SELECT TITLE,LENGTH_,NAME_ AS CATEGORY
FROM FILM F,FILM_CATEGORY FC,CATEGORY C
WHERE F.FILM_ID=FC.FILM_ID AND FC.CATEGORY_ID=C.CATEGORY_ID AND C.NAME_ IN ('SPORTS','DRAMA')
ORDER BY F.LENGTH_ DESC

136ROW

    

Q3. Write a query to create a list of the addresses that are not associated to any customer.

SELECT * FROM CUSTOMER
SELECT * FROM ADDRESS

SELECT ADDRESS 
FROM ADDRESS A 
WHERE A.ADDRESS_ID NOT IN (SELECT ADDRESS_ID FROM CUSTOMER)

4ROWS

Q4. Write a query to create a list of the revenue (sum of amount) grouped by a column in the format "country, city" ordered in decreasing amount of revenue.
eg. 	"Poland, Bydgoszcz"		52.88


SELECT  (select country from country where CT.country_id=country.country_id) COUNTRY_LIST, CT.CITY AS NAME1,SUM(ROUND(AMOUNT,2))  SUMM 
FROM PAYMENT P,CUSTOMER CST,ADDRESS AD,CITY CT, COUNTRY CTRY
WHERE P.CUSTOMER_ID=CST.CUSTOMER_ID 
AND CST.ADDRESS_ID=AD.ADDRESS_ID
 AND AD.CITY_ID=CT.CITY_ID 
 AND CT.COUNTRY_ID=CTRY.COUNTRY_ID
 GROUP BY CT.CITY,country_list
 ORDER BY COUNTRY_LIST desc
 
SELECT 





Q5. Write a query to create a list with the average of the sales amount each staff_id has per customer.
result: 	2	56.64
	1	55.91
    SELECT * FROM CATEGORY
SELECT * FROM PAYMENT
SELECT * FROM CUSTOMER
SELECT * FROM ADDRESS
SELECT * FROM RENTAL
SELECT * FROM INVENTORY
SELECT * FROM CITY
SELECT * FROM COUNTRY
SELECT * FROM STORE
SELECT * FROM FILM
SELECT * FROM FILM_CATEGORY
    
    
    

Q6. Write a query that shows average daily revenue of all Sundays.



SELECT SUM(AMOUNT) /(SELECT  COUNT(DISTINCT DATE(PAYMENT_DATE)) FROM PAYMENT WHERE WEEKDAY(DATE(PAYMENT_DATE))=6)
FROM PAYMENT 
WHERE WEEKDAY((PAYMENT_DATE))=6

1817 ans


Q7. Write a query to create a list that shows how much the 
average customer spent in total (customer life-time value) grouped by the different districts.

SELECT * FROM PAYMENT
SELECT * FROM CUSTOMER
SELECT * FROM ADDRESS



SELECT DISTRICT D, 
SUM(AMOUNT)/(SELECT COUNT(CUSTOMER_ID) 
FROM CUSTOMER  JOIN ADDRESS ON CUSTOMER.ADDRESS_ID=ADDRESS.ADDRESS_ID WHERE DISTRICT=D) AVERAGE
FROM PAYMENT 
JOIN CUSTOMER ON PAYMENT.CUSTOMER_ID=CUSTOMER.CUSTOMER_ID
JOIN ADDRESS ON CUSTOMER.ADDRESS_ID=ADDRESS.ADDRESS_ID
GROUP BY DISTRICT
ORDER BY AVERAGE DESC

376rows 

Q8. Write a query to list down the highest overall revenue collected 
(sum of amount per title) by a film in each category. 
Result should display the film title, category name and total revenue.
eg. 	"FOOL MOCKINGBIRD"		"Action"	175.77
	"DOGMA FAMILY"			"Animation"	178.7
	"BACKLASH UNDEFEATED"	"Children"	158.81
    
        SELECT * FROM CATEGORY
SELECT * FROM PAYMENT
SELECT * FROM CUSTOMER
SELECT * FROM ADDRESS
SELECT * FROM RENTAL
SELECT * FROM INVENTORY
SELECT * FROM CITY
SELECT * FROM COUNTRY
SELECT * FROM STORE
SELECT * FROM FILM
SELECT * FROM FILM_CATEGORY
SELECT * FROM CATEGORY

SELECT category.name_, FILM.TITLE, SUM(IFNULL(AMOUNT,0)) REVENUE
FROM FILM 
JOIN INVENTORY ON FILM.FILM_ID=INVENTORY.FILM_ID
JOIN RENTAL ON RENTAL.INVENTORY_ID=INVENTORY.INVENTORY_ID
JOIN PAYMENT ON RENTAL.RENTAL_ID=PAYMENT.RENTAL_ID
JOIN FILM_CATEGORY ON FILM.FILM_ID=FILM_CATEGORY.FILM_ID
JOIN CATEGORY ON FILM_CATEGORY.CATEGORY_ID=CATEGORY.CATEGORY_ID
GROUP BY category.name_,FILM.TITLE
ORDER BY REVENUE desc
limit 1;

 with ctetmp as
(SELECT  FILM.TITLE as movie,category.name_ as category , sum(IFNULL(AMOUNT,0)) as REVENUE
FROM FILM 
JOIN INVENTORY ON FILM.FILM_ID=INVENTORY.FILM_ID
JOIN RENTAL ON RENTAL.INVENTORY_ID=INVENTORY.INVENTORY_ID
JOIN PAYMENT ON RENTAL.RENTAL_ID=PAYMENT.RENTAL_ID
JOIN FILM_CATEGORY ON FILM.FILM_ID=FILM_CATEGORY.FILM_ID
JOIN CATEGORY ON FILM_CATEGORY.CATEGORY_ID=CATEGORY.CATEGORY_ID
GROUP BY category.name_,FILM.TITLE
)

select c1.movie,c1.category,c1.revenue,
rank()over(partition by c1.category )
from ctetmp c1

group by 1,2
    
    
    

SELECT X,Y, T FROM(
SELECT F.TITLE X, C.NAME_ Y, ROUND(SUM(P.AMOUNT),2) T
FROM FILM F,INVENTORY I, RENTAL R, FILM_CATEGORY FC,PAYMENT P, CATEGORY C
WHERE F.FILM_ID=I.FILM_ID AND I.INVENTORY_ID=R.INVENTORY_ID
AND R.RENTAL_ID=P.RENTAL_ID
AND F.FILM_ID=FC.FILM_ID
AND FC.CATEGORY_ID=C.CATEGORY_ID      

GROUP BY F.TITLE, C.NAME_ 
ORDER BY T
)A  
GROUP BY X,A.Y
LIMIT 3



SELECT * FROM CATEGORY
SELECT * FROM PAYMENT
SELECT * FROM CUSTOMER
SELECT * FROM ADDRESS
SELECT * FROM RENTAL
SELECT * FROM INVENTORY
SELECT * FROM CITY
SELECT * FROM COUNTRY
SELECT * FROM STORE
SELECT * FROM FILM
SELECT * FROM FILM_CATEGORY



Q9. Modify the table "rental" to be partitioned using PARTITION command based on ‘rental_date’ in below intervals:
	<2005
between 2005–2010
	between 2011–2015
	between 2016–2020
	>2020 - Partitions are created yearly
    
    
    
    
    

Q10. Modify the table "film" to be partitioned using PARTITION command based on ‘rating’ from below list. Further apply hash sub-partitioning based on ‘film_id’ into 4 sub-partitions.

partition_1 - "R"
partition_2 - "PG-13", "PG"
partition_3 - "G", "NC-17"

Q11. Write a query to count the total number of addresses from the “address” table where the ‘postal_code’ is of the below formats. Use regular expression.

9*1**, 9*2**, 9*3**, 9*4**, 9*5**

eg. postal codes - 91522, 80100, 92712, 60423, 91111, 9211
result - 2
SELECT * FROM ADDRESS
SELECT COUNT(*) 
FROM ADDRESS
WHERE POSTAL_CODE LIKE '9_2__' OR
 POSTAL_CODE LIKE '9_3__' OR
 POSTAL_CODE LIKE '9_1__' OR
 POSTAL_CODE LIKE '9_4__' OR 
 POSTAL_CODE LIKE '9_5__' 


Q12. Write a query to create a materialized view from the “payment” table 
where ‘amount’ is between(inclusive) $5 to $8. 
The view should manually refresh on demand. Also write a query to manually refresh the created materialized view.

Q13. Write a query to list down the total sales of each staff with each customer from the ‘payment’ table.
 In the same result, list down the total sales of each staff i.e. sum of sales from all customers 
 for a particular staff. Use the ROLLUP command. Also use GROUPING command to indicate null values.
 

Q.14 Write a single query to display the customer_id, staff_id, payment_id, amount, amount on immediately previous payment_id, amount on immediately next payment_id ny_sales for the payments from customer_id ‘269’ to  staff_id ‘1’.

SELECT CONCAT(country, ', ', city) AS location, SUM(amount) AS revenue
FROM sales
GROUP BY location
ORDER BY revenue DESC;

